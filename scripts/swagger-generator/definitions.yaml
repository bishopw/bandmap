# Definitions for generating the Band Map API swagger.yaml config file.
# For use with swagger-generator.py.

# Common explanatory boilerplate that appears in multiple fields.
explainDateFormat: 'The format is the ISO 8601 standard date format: YYYY-MM-DD.'
explainDateTimeFormat: 'The format is the ISO 8601 standard date-time format: YYYY-MM-DDTHH:MM:SS[+/-]HH:MM'
explainTags: 'Band Map attempts to store all tags in a "lower-case-dashed-canonical-format" and makes conversions on newly submitted tags to canonical form like so: TitleCase -> titlecase; camelCase -> camelcase; lowercaseword -> lowercaseword; three word tag -> three-word-tag; underscored_tag -> underscored-tag, so you probably want to submit new tags with words separated by dash, space, or underscore.  Once a tag is created, subsequent lookups are done by removing all dashes, underscores, and spaces, and converting to lower case, then mapping from the lower case to the actual tag, so for example the following mappings apply: yourmultiwordtag -> your-multi-word-tag; your multi word tag -> your-multi-word-tag; YourMultiWordTag -> your-multi-word-tag; yo-urm-ult_iw-o_rdT-Ag -> your-multi-word-tag.'
explainUniqueNames: If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
onlyPresent: This field will only be present if a value was entered.
onlyPresentArray: This array will only be present if a values are known.
optional: 'optional '
nOptional: 'n optional'
explainArrayReplacement: If specified for an existing {{parentSingular}}, this array will completely replace the existing {{plural}} with the new {{plural}} for this {{parentSingular}}.  To instead add or remove {{plural}} individually to/from the {{parentSingular}}, POST or DELETE respectively to the nested sub-URL representing this array.
explainArrayReplacementOne: If specified, this array will completely replace the existing {{plural}} with the new {{plural}} for this {{parentSingular}}.  To instead add or remove {{plural}} individually to/from the {{parentSingular}}, POST or DELETE respectively to the nested sub-URL representing this array.
explainCurrentActivity: An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
forNewOnly: For new {{plural}} only.
anArrayContainingThe: An {{optional}}array containing the
anArrayOf: An {{optional}}array of
subcollectionDescription: The collection of {{collectionContents}}.
Parameter:
  name: '{{paramName}}'
  in: path
  type: string
  description: '{{paramDescription}}'
  required: true
paramDescriptionOneId: The {{primaryIdField}} of the target {{singular}}.
paramDescriptionTwoIds: The {{primaryIdField}} or {{secondaryIdField}} of the target {{singular}}.  If you are specifying the {{singular}} by {{secondaryIdField}}, preserve any spaces between words in the name in the URL - they will be processed normally.
collectionSummary: '{{plural}} with {{singular}} info'
collectionDescription: '{{plural}} with {{singular}} info'
collectionPathSummary: Get the collection of {{collectionSummary}}.
collectionPathDescription: Get the collection of {{collectionDescription}}.
collectionPathSummaryPatch: Modify or create the specified {{singular}} or {{plural}}.
collectionPathDescriptionPatch: Modify or create the specified {{singular}} or {{plural}}.  Specify an existing {{singular}} or {{plural}} to be modified using {{singular}} {{idFields}}.  The query args for this operation apply only to the returned array confirming your changes.
collectionPathArrayDescriptionPatch: An array containing one or more {{singular}} modification objects, or new {{plural}}.  Specify existing {{plural}} to modify by {{idFields}}.  If you specify any {{plural}} that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a {{singular}}, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
collectionPathSummaryPut: Replace or create the specified {{singular}} or {{plural}}.
collectionPathDescriptionPut: Replace or create the specified {{singular}} or {{plural}}.  Specify existing {{plural}} to replace by {{idFields}}.  If you specify any {{plural}} that are not found in the collection already, they will be created as new and will not replace anything.  The query args for this operation apply only to the returned array confirming your changes.
collectionPathArrayDescriptionPut: An array containing one or more {{plural}} specified by {{idFields}}.  If you specify a {{singular}} that is not found in the collection already, the {{singular}} will be created instead of replaced.
collectionDeleteDescription: 'An array of {{idFields}} values representing one or more {{plural}} to delete.  Use either this request body or the provided query args to select which {{plural}} you want to delete.  WARNING: A DELETE call to this URI with no particular {{plural}} specified will cause ALL {{plural}} to be deleted and the ENTIRE collection to be cleared.'
collectionDeleteArrayDescription: 'An array of {{idFields}} values representing one or more {{plural}} to delete.  Use either this request body or the provided query args to select which {{plural}} you want to delete.  WARNING: A DELETE call to this URI with no particular {{plural}} specified will cause ALL {{plural}} to be deleted and the ENTIRE collection to be cleared.'
collectionDeleteArrayItemsDescription: The {{idFields}} of a {{singular}} to delete.
itemPathDescriptionPatch: 'An object containing one or more fields to modify on the specified {{singular}}.  If you are modifying one of the sub-arrays within a {{singular}}, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.'
explainReadOnlyRecords: '{{capSingular}} records are automatically tracked by Band Map and can''t be created or modified manually through the API, only read and deleted'
post201Response: The specified {{singular}} or {{plural}} were added successfully.  The newly added {{singular}} or {{plural}} are returned in the response body array with their assigned {{primaryIdField}} and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
post201ResponseArray: An array containing the newly added {{singular}} or {{plural}} including their assigned {{primaryIdField}} and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
itemPathSummary: Get the specified {{singular}}.
itemPathDescription: Get the specified {{singular}} and {{singular}} info.
itemPath200ResponseDescription: An object representing the specified {{singular}} with {{singular}} info.

# Standard Field Descriptions

idDescription: The unique, stable ID of this {{singular}}.
postDescription: A new {{singular}} to create.
selectOrPostDescription: An existing {{singular}} to add to this {{parentSingular}}, or a new {{singular}} to create and add.  Specify an existing {{singular}} by {{idFields}}.  {{explainIds}}
selectOrPostExplainOneId: ''
selectOrPostExplainTwoIds: 'If no {{primaryIdField}} is specified and no {{singular}} with the specified {{secondaryIdField}} exists, a new {{singular}} will be created and added.  '
selectOrModifyDescription: An existing {{singular}} to modify, or a new {{singular}} to create.  Specify an existing {{singular}} by {{idFields}}.  {{explainIds}}In any case, if the {{singular}} is not already associated with this {{parentSingular}}, the {{singular}} will be added to the {{parentSingular}}.
selectOrModifyExplainOneId: 'If no {{primaryIdField}} is specified, a new {{singular}} will be created.  '
selectOrModifyExplainTwoIds: 'If no {{primaryIdField}} is specified, and no {{singular}} exists with the specified {{secondaryIdField}}, a new {{singular}} will be created.  The {{secondaryIdField}} of an existing {{singular}} can be changed by specifying the {{singular}} by {{primaryIdField}}, along with the new {{secondaryIdField}}.  '
patchDescription:  An existing {{singular}} to modify, or a new {{singular}} to create.  Specify an existing {{singular}} by {{idFields}}.  {{explainIds}}
idPatchDescription: The ID of an existing {{singular}} to modify.
replaceOrCreateDescription: 'An existing {{singular}} to replace, or a new {{singular}} to create.  BEWARE: When replacing an existing {{singular}}, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing {{singular}} by {{idFields}}.  {{explainIds}}In any case, the created or replaced {{singular}} will be added to this {{parentSingular}} if they were not already associated.'
replaceOrCreateExplainOneId: 'If no {{primaryIdField}} is specified, a new {{singular}} will be created.  '
replaceOrCreateExplainTwoIds: 'If no {{primaryIdField}} is specified, and no {{singular}} exists with the specified {{secondaryIdField}}, a new {{singular}} will be created.  '
putDescription: 'An existing {{singular}} to replace, or a new {{singular}} to create.  BEWARE: When replacing an existing {{singular}}, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing {{singular}} by {{idFields}}.  {{explainIds}}'
patchOneDescription:  The new fields on the existing {{singular}} to modify.
putOneDescription: 'A new {{singular}} to replace the previous one.  BEWARE: When replacing an existing {{singular}}, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
subTloDescription: The {{singular}} associated with this {{parentSingular}}.
subTloDescriptionPost: The {{singular}} to associate with this {{parentSingular}}.  Specify by {{idFields}}.
withWarnings: WithWarnings

standardFields:

  id:
    type: integer
    description: '{{idDescription}}'
    minimum: 0
    example: 123

  link:
    type: string
    description: A stable, absolute URL linking to this {{singular}}.

  name:
    type: string
    description: The name of this {{singular}}.
    minLength: 1

  namePost:
    type: string
    description: The name of the new {{singular}}.  Names must be unique.  {{explainUniqueNames}}
    minLength: 1

  idSelectOrPost:
    type: integer
    description: The ID of an existing {{singular}} to add to this {{parentSingular}}.
    minimum: 0

  nameSelectOrPost:
    type: string
    description: The name of an existing {{singular}} to add to this {{parentSingular}}, or the name of a new {{singular}} to create and add.  Names for new {{plural}} must be unique.
    minLength: 1

  idSelectOrModify:
    type: integer
    description: The ID of an existing {{singular}} to modify.
    minimum: 0

  nameSelectOrModify:
    type: string
    description: The name of an existing {{singular}} to add to this {{parentSingular}} or modify, or the name of a new {{singular}} to create and add.
    minLength: 1

  idPatch:
    type: integer
    description: '{{idPatchDescription}}'
    minimum: 0

  namePatch:
    type: string
    description: The name of the {{singular}} to modify or create.  Or if an existing {{singular}} was specified by {{primaryIdField}}, an optional new name for the existing {{singular}}.
    minLength: 1

  idReplaceOrCreate: 
    type: integer
    description: The ID of an existing {{singular}} to replace.
    minimum: 0

  nameReplaceOrCreate:
    type: string
    description: The name of an existing {{singular}} to replace, the name of a new {{singular}} to create, or if an existing {{singular}} was specified by {{primaryIdField}}, the new name for the replacement {{singular}}.
    minLength: 1

  idPut:
    type: integer
    description: The ID of an existing {{singular}} to replace.
    minimum: 0

  namePut:
    type: string
    description: The name of the {{singular}} to replace or create.  Or if an existing {{singular}} was specified by {{primaryIdField}}, the new name for the {{singular}} that will replace the original.
    minLength: 1

  namePatchOne:
    type: string
    description: An optional new name for this {{singular}}.  Names must be unique.  {{explainUniqueNames}}
    minLength: 1

  activeDates:
    __gen__:
      tokens:
        singular: active dates
        plural: active dates
        urlSingular: active-dates
        urlPlural: active-dates
        codeSingular: ActiveDates
        codePlural: ActiveDates
    type: array
    description: An array containing the active dates for this {{singular}}.
    items:
      description: A pair of dates ("from" and "until") when this {{singular}} was active.  {{explainCurrentActivity}}
      properties:
        from:
          type: string
          format: date
          description: 'The date this {{singular}} was active from.  {{explainDateFormat}}'
          example: '1980-04-20'
        until:
          type: string
          format: date
          description: 'The date this {{singular}} was active until.  {{explainDateFormat}}'
          example: '2020-04-20'

  subcollectionCount:
    type: integer
    description: The total number of {{lastArrayItemsPlural}} for this {{singular}}.  Should be equal to {{lastArrayName}}.length.
    minimum: 0

  objectsCount:
    type: integer
    description: The total number of objects in the above array.  Should be equal to the array's length.
    minimum: 0
    example: 123

  defaultSubcollection:
    description: '{{anArrayContainingThe}} {{plural}} associated with this
    {{parentSingular}}.'
    items:
      description: A {{singular}} associated with this {{parentSingular}}.
      properties:

topLevelPaths:
  # /
  # /version
  - /bands
  - /connections
  - /people
  - /roles
  # /locations
  - /locations/cities
  - /locations/states
  - /locations/countries
  - /locations/regions
  # /edit-history
  - /edit-history/edits
  - /edit-history/editors
  - /edit-history/revisions
  - /edit-history/annotations
  - /edit-history/info-sources
  - /edit-history/info-source-tags
  - /users
  - /sessions

topLevelObjects:

  Band:
    __gen__:
      tokens:
        # Singular/plural names are inferred automatically
        # from top level object name, but can be overridden here:
        tag: Bands
        singular: band
        plural: bands
        urlSingular: band
        urlPlural: bands
        codeSingular: Band
        codePlural: Bands
    description: A band and its related band info.
    # required fields are only for POSTs and collection item-level PUTs for now.
    required:
      - name
    properties:
      id:
      link:
      name:
        minLength: 1
        maxLength: 255
      clickCount:
        __gen__:
          fieldType: inline
          methods:
            - 'GET'
        type: integer
        description: The number of times have people clicked on this band in the Band Map app.
        minimum: 0
        example: 123
      people:
        description: '{{anArrayContainingThe}} band members or other people associated with this band.'
        items:
          description: A band member or other person associated with this band.
          properties:
            id:
            link:
            name:
            roles:
              description: '{{anArrayContainingThe}} roles this person has had in this band (like instruments played).'
              items:
                description: A role this person has had in this band (like an instrument played).
                properties:
                  id:
                  link:
                  name:
                  activeDates:
                    description: '{{anArrayContainingThe}} active dates that this person had this role in this band.  {{onlyPresentArray}}'
                    items:
                      description: Active dates that this person had this role in this band.  {{explainCurrentActivity}}
                      properties:
                        from:
                          description: The date this person started having this role in this band from.  {{explainDateFormat}}  {{onlyPresent}}
                        until:
                          description: The date this person had this role in this band until.  {{explainDateFormat}}  {{onlyPresent}}
            rolesCount:
              description: The total number of roles this person is known to have had in this band.  Should be equal to roles.length.
            activeDates:
              __gen__:
                methods:
                  - GET
              description: '{{anArrayContainingThe}} active dates that this person played in or was associated with this band (in any role).  If per-role active dates are/were given, they will be automatically reflected in this array as well, but they cannot be entered here directly.  {{onlyPresentArray}}'
              items:
                description: Active dates that this person played in or was associated with this band (in any role).  {{explainCurrentActivity}}
                properties:
                  from:
                    description: The date this person started playing in this band from.  {{explainDateFormat}}  {{onlyPresent}}
                  until:
                    description: The date this person played in this band until.  {{explainDateFormat}}  {{onlyPresent}}
      peopleCount:
        description: The total number of people in or associated with this band.  Should be equal to people.length.
      cities:
        description: '{{anArrayContainingThe}} city or cities this band has been based in, ordered by most recent to oldest.'
        items:
          description: A city this band has been based in.
          properties:
            id:
            link:
            name:
              type: string
              description: 'The name of this city, formatted like "Seattle, WA, USA".'
              example: Seattle, WA, USA
            activeDates:
              description: '{{anArrayContainingThe}} active dates that this band was based in this city during.  {{onlyPresentArray}}'
              items:
                description: Active dates that this band was based in this city during.  {{explainCurrentActivity}}
                properties:
                  from:
                    description: The date this band started being based in this city from.  {{explainDateFormat}}  {{onlyPresent}}
                  until:
                    description: The date this band stopped being based in this city from.  {{explainDateFormat}}  {{onlyPresent}}
      citiesCount:
        description: The total number of cities this band has been based in.  Should be equal to cities.length.
      connectedBands:
        description: '{{anArrayContainingThe}} other bands this band is connected to.'
        items:
          description: A band that this band is connected to.
          properties:
            id:
            link:
            name:
            description:
              type: string
              description: 'A brief description of the connection, like "Shared members: Member One, Member Two.".'
              example: 'Shared members: Member One, Member Two.'
      connectedBandsCount:
        description: The total number of other bands connected to this band.  Should be equal to connectedBands.length.
      webLinks:
        type: array
        description: '{{anArrayOf}} web links related to this band.'
        items:
          description: A web link related to this band.
          properties:
            url:
              __gen__:
                isId: true # Works like a 'name' field.
              type: string
              description: The URL of this band web link.
              example: https://www.socialmediawebsite.com/bands/the-band
            description:
              type: string
              description: '{{forNewOnly}}  A{{nOptional}} description of this web link.  {{onlyPresent}}'
              example: Band Name on Social Media Website
      webLinksCount:
        description: The total number of web links related to this band.  Should be equal to webLinks.length.
      activeDates:
        description: '{{anArrayContainingThe}} dates this band was active.  If per-role, per-person, or per-city active dates are/were given, they will be automatically reflected in this array as well, and do not need to be entered in both places.  {{onlyPresentArray}}'
        items:
          description: Dates that this band was active.  {{explainCurrentActivity}}
          properties:
            from:
              description: The date this band started being active.  {{explainDateFormat}}  {{onlyPresent}}
            until:
              description: The date this band stopped being active.  {{explainDateFormat}}  {{onlyPresent}}

  ConnectedBand:
    description: A connected band and a description of what connects them.
    properties:
      id:
      link:
        example: https://www.seattlebandmap.com/api/bands/123
      name:
      description:
        type: string
        description: 'A brief description of the connection, like "Shared members: Member One, Member Two.".'
        maxLength: 10000

  Connection:
    __gen__:
      methods:
        - GET
        - POST
        - PATCH
        - DELETE
      tokens:
        tag: Connections
        collectionSummary: connections between bands
        collectionDescription: connections between bands, with descriptions of what connects them (for example, shared members).  Connections can be POSTed and DELETEd, and their descriptions can be PATCHed, but they can't be replaced with PUT since a their id is fixed once their two bands are defined
        band1Description: The first band.  {{specifyBandBy}}
        band2Description: The second band.  {{specifyBandBy}}
        specifyBandBy: ''
        specifyConnectionBy: 'Existing connections can be specified in any of three ways: canonical id (like "123-789"), name id (like "band a-band b", also supplied in the connection "id" field) or by including either the id or name of both "band1" and "band2" objects (and not specifying a connection id).  The ordering of bands in any of the three methods does not matter (that is, "band a-band b" will address the same connection as "band b-band a").'
        idDescription: The unique, stable ID of this connection.  It will be a string of the form "<band1-id>-<band2-id>".
        collectionPathSummaryPatch: Modify or create the specified connection(s).
        collectionPathDescriptionPatch: 'Modify or create the specified connection(s).  For existing connections, only the description can be modified, not the bands.  {{specifyConnectionBy}}  The query args for this operation apply only to the returned array confirming your changes.'
        collectionPathArrayDescriptionPatch: 'An array containing one or more existing or new connections.  For existing connections, only the description can be modified, not the bands.  {{specifyConnectionBy}}'
        patchDescription: 'An existing connection to modify (only descriptions can be modified), or a new connection to create.  {{specifyConnectionBy}}'
        collectionPathArrayDescriptionPut: 'An array containing one or more existing or new connections.  For existing connections, only the description can be "replaced", not the bands.  {{specifyConnectionBy}}'
        itemPathDescriptionPatch: An object specifying a new description for an existing connection.
        patchOneDescription:  An object specifying a new description for an existing connection.
      postTokens:
        specifyBandBy: Specify by either id or name.  The first and second bands must already exist before creating a new connection.
      patchTokens:
        idDescription: An optional id of an existing connection to modify.  A string of the form "<band1>-<band2>" where <band1> and <band2> are either the id or the name of two existing bands.  The order does not matter ("123-789" will address the same connection as "789-123").
        band1Description: Either the first band in a new connection, or the first band in an existing connection that was not already specified with the connection id.  Either way, specify by either id or name.  The first and second bands must already exist before creating a new connection.
        band2Description: Either the second band in a new connection, or the second band in an existing connection that was not already specified with the connection id.  Either way, specify by either id or name.  The first and second bands must already exist before creating a new connection.
      putTokens:
        idDescription: An optional id of an existing connection to replace.  A string of the form "<band1>-<band2>" where <band1> and <band2> are either the id or the name of two existing bands.  The order does not matter ("123-789" will address the same connection as "789-123").
        band1Description: Either the first band in a new connection, or the first band in an existing connection that was not already specified with the connection id.  Either way, specify by either id or name.  The first and second bands must already exist before creating a new connection.
        band2Description: Either the second band in a new connection, or the second band in an existing connection that was not already specified with the connection id.  Either way, specify by either id or name.  The first and second bands must already exist before creating a new connection.
      putOneSchemaTypeModifications:
        include_required_fields: false
    description: A connection between two bands, with a description of what connects them.
    required:
      - band1
      - band2
    properties:
      id:
        type: string
        description: '{{idDescription}}'
        example: "123-789"
      link:
        example: https://www.seattlebandmap.com/api/connections/123-789
      band1:
        __gen__:
          topLevelObject: Band
          noSchemaTypes:
            - patchOne
            - putOne
        description: '{{band1Description}}'
        properties:
          id:
            __gen__:
              fieldType: inline
            type: integer
            description: The unique, stable ID of the first band.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to the first band.
            example: https://www.seattlebandmap.com/api/bands/123
          name:
            type: string
            description: The name of the first band.
            minLength: 1
            example: Band Name
      band2:
        __gen__:
          topLevelObject: Band
          noSchemaTypes:
            - patchOne
            - putOne
        description: '{{band2Description}}'
        properties:
          id:
            __gen__:
              fieldType: inline
            type: integer
            description: The unique, stable ID of the second band.
            minimum: 0
            example: 789
          link:
            type: string
            description: A stable, absolute URL linking to the second band.
            example: https://www.seattlebandmap.com/api/bands/789
          name:
            type: string
            description: The name of the second band.
            minLength: 1
            example: Band Name
      description:
        type: string
        description: 'A{{nOptional}} brief description of the connection, like "Shared members: Member One, Member Two.".'
        maxLength: 10000
        example: 'Shared members: Member One, Member Two.'

  Person:
    __gen__:
      tokens:
        tag: People
        plural: people
    description: A person associated with one or more bands.
    required:
      - name
    properties:
      id:
      link:
      name:
        minLength: 1
        maxLength: 255
      bands:
        description: '{{anArrayContainingThe}} bands this person is a member of or is associated with.'
        items:
          description: A band this person is a member of or is associated with.
          properties:
            id:
            link:
            name:
            roles:
              description: '{{anArrayContainingThe}} roles this person has had in this band (like instruments played).'
              items:
                description: A role this person has had in this band (like an instrument played).
                properties:
                  id:
                  link:
                  name:
                  activeDates:
                    description: '{{anArrayContainingThe}} active dates that this person had this role in this band.  {{onlyPresentArray}}'
                    items:
                      description: Active dates that this person had this role in this band.  {{explainCurrentActivity}}
                      properties:
                        from:
                          description: The date this person started having this role in this band from.  {{explainDateFormat}}  {{onlyPresent}}
                        until:
                          description: The date this person had this role in this band until.  {{explainDateFormat}}  {{onlyPresent}}
            rolesCount:
              description: The total number of roles this person is known to have had in this band.  Should be equal to roles.length.
            activeDates:
              __gen__:
                methods:
                  - GET
              description: '{{anArrayContainingThe}} active dates that this person played in or was associated with this band (in any role).  If per-role active dates are/were given, they will be automatically reflected in this array as well, but they cannot be entered here directly.  {{onlyPresentArray}}'
              items:
                description: Active dates that this person played in or was associated with this band (in any role).  {{explainCurrentActivity}}
                properties:
                  from:
                    description: The date this person started playing in this band from.  {{explainDateFormat}}  {{onlyPresent}}
                  until:
                    description: The date this person played in this band until.  {{explainDateFormat}}  {{onlyPresent}}
      bandsCount:
        description: The total number of bands this person is a member of or is associated with.  Should be equal to bands.length.
      roles:
        __gen__:
          methods:
            - GET
        description: '{{anArrayContainingThe}} roles this person has had, across all their bands.  People''s roles cannot be submitted here but should instead be posted as per-band roles to specific bands at /people/{person}/bands/{band}/roles or /bands/{band}/people/{person}/roles.'
        items:
          description: A role this person has or has had.
          properties:
            id:
            link:
            name:
      rolesCount:
        description: The total number of roles this person has had, across all their bands.  Should be equal to roles.length.
      cities:
        __gen__:
          methods:
            - GET
        description: '{{anArrayContainingThe}} city or cities this person is or has been based in, across all their bands, ordered by most recent to oldest.  People''s cities cannot be submitted here but should instead be posted as per-band cities to specific bands at /bands/{band}/cities.'
        items:
          description: A city this person has been based in in one or more of their bands.
          properties:
            id:
            link:
            name:
      citiesCount:
        description: The total number of cities this person is or has been based in, across all their bands, ordered by most recent to oldest.  Should be equal to cities.length.
      activeDates:
        __gen__:
          methods:
            - GET
        description: '{{anArrayContainingThe}} dates this person was active across any/all of their bands.  If per-band-role active dates are/were given, they will be automatically reflected in this array, but they cannot be entered here directly.  {{onlyPresentArray}}'
        items:
          description: Dates that this person was active in bands.  {{explainCurrentActivity}}
          properties:
            from:
              description: The date this person started being active.  {{explainDateFormat}}  {{onlyPresent}}
            until:
              description: The date this person stopped being active.  {{explainDateFormat}}  {{onlyPresent}}

  Role:
    __gen__:
      tokens:
        tag: Roles
    description: A role people have in bands, like guitarist or vocalist or producer.
    properties:
      id:
      link:
      name:
        example: Guitarist

  City:
    __gen__:
      namespace: locations
      tokens:
        tag: Locations
        plural: cities
    description: A city where bands or artists play.
    properties:
      id:
      link:
      name:
        example: Seattle
      state:
        description: The state/province/prefecture that this city belongs to and/or is located in.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this state/province/prefecture.
            minimum: 0
            example: 123
          link:
            type: string
            description: The stable, absolute URL linking to this state/province/prefecture.
            example: https://www.seattlebandmap.com/api/locations/states/123
          name:
            type: string
            description: The name of this state/province/prefecture, often a capitalized abreviation, like "WA" for Washington state.
            minLength: 1
            maxLength: 255
            example: WA
      country:
        description: The country that this city belongs to and/or is located in.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this country.
            minimum: 0
            example: 123
          link:
            type: string
            description: The stable, absolute URL linking to this country.
            example: https://www.seattlebandmap.com/api/locations/countries/123
          name:
            type: string
            description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
            minLength: 1
            maxLength: 255
            example: USA
      regions:
        description: '{{anArrayOf}} any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.'
        items:
          description: A region that this city belongs to.
          properties:
            id:
            link:
            name:

  State:
    __gen__:
      namespace: locations
      tokens:
        tag: Locations
        collectionSummary: states/provinces/prefectures
        collectionDescription: states, provinces, prefectures, or other administrative areas where bands or artists play
    description: A state, province, prefecture, or other administrative area where bands or artists play.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this state/province/prefecture.
        minimum: 0
        example: 123
      link:
        type: string
        description: The stable, absolute URL linking to this state/province/prefecture.
        example: https://www.seattlebandmap.com/api/locations/states/123
      name:
        type: string
        description: The name of this state/province/prefecture, often a capitalized abreviation, like "WA" for Washington State.
        minLength: 1
        maxLength: 255
        example: WA
      cities:
        description: '{{anArrayContainingThe}} cities that belong to or are located in this state/province/prefecture.'
        items:
          description: A city that belongs to or is located in this state/province/prefecture.
          properties:
            id:
            link:
            name:
      citiesCount:
        description: The total number of cities that belong to or are located in this state/province/prefecture.  Should be equal to cities.length.
      country:
        description: The country that this state belongs to and/or is located in.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this country.
            minimum: 0
            example: 123
          link:
            type: string
            description: The stable, absolute URL linking to this country.
            example: https://www.seattlebandmap.com/api/locations/countries/123
          name:
            type: string
            description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
            minLength: 1
            maxLength: 255
            example: USA
      regions:
        description: '{{anArrayOf}} any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.'
        items:
          description: A region that this state/province/prefecture belongs to.
          properties:
            id:
            link:
            name:

  Country:
    __gen__:
      namespace: locations
      tokens:
        tag: Locations
        plural: countries
    description: A country where bands or artists play.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this country.
        minimum: 0
        example: 123
      link:
        type: string
        description: The stable, absolute URL linking to this country.
        example: https://www.seattlebandmap.com/api/locations/countries/123
      name:
        type: string
        description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
        minLength: 1
        maxLength: 255
        example: USA
      states:
        description: '{{anArrayContainingThe}} states/provinces/prefectures that belong to or are located in this country.'
        items:
          description: A state/province/prefecture that belongs to or is located in this state/province/prefecture.
          properties:
            id:
            link:
            name:
      statesCount:
        description: The total number of states/provinces/prefectures that belong to or are located in this country.
      regions:
        description: '{{anArrayOf}} any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.'
        items:
          description: A region that this country belongs to.
          properties:
            id:
            link:
            name:

  Region:
    __gen__:
      namespace: locations
      tokens:
        tag: Locations
    description: A free-form grouping of countries, states, cities, and/or other regions.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this region.
        minimum: 0
        example: 123
      link:
        type: string
        description: The stable, absolute URL linking to this region.
        example: https://www.seattlebandmap.com/api/locations/regions/123
      name:
        type: string
        description: The name of this region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      cities:
        description: '{{anArrayContainingThe}} cities that belong to or are located in this region.'
        items:
          description: A city that belongs to or is located in this region.
          properties:
            id:
            link:
            name:
      citiesCount:
        description: The total number of cities that belong to or are located in this region.  Should be equal to cities.length.
      states:
        description: '{{anArrayContainingThe}} states/provinces/prefectures that belong to or are located in this region.'
        items:
          description: A state/province/prefecture that belongs to or is located in this region.
          properties:
            id:
            link:
            name:
      statesCount:
        description: The total number of states/provinces/prefectures that belong to or are located in this region.
      countries:
        description: '{{anArrayContainingThe}} countries that belong to or are located in this region.'
        items:
          description: A country that belongs to or is located in this region.
          properties:
            id:
            link:
            name:
      countriesCount:
        description: The total number of countries that belong to or are located in this region.
      regions:
        description: '{{anArrayContainingThe}} other regions that belong to or are located in this region.'
        items:
          description: Another region that belongs to or is located in this region.
          properties:
            id:
            link:
            name:
      regionsCount:
        description: The total number of other regions that belong to or are located in this region.

  Edit:
    __gen__:
      namespace: edit-history
      methods:
        - GET
        - DELETE
      tokens:
        tag: Edit History
        collectionSummary: edits
        collectionDescription: edit transactions.  An edit is one successful  HTTP POST, PATCH, PUT, or DELETE call performed by a Band Map user.  Edits are made up of one or more revisions.  {{explainReadOnlyRecords}}
    description: An edit transaction (successful HTTP POST, PATCH, PUT, or DELETE call) performed by a Band Map user.  Edits are made up of one or more revisions.  Edit records are automatically created by Band Map and can't be created or modified manually through the API, only read and deleted.
    properties:
      id:
      link:
      datetime:
          type: string
          format: dateTime
          description: The date and time this edit HTTP transaction completed.  {{explainDateTimeFormat}}
          example: '1980-04-20T06:09:00-08:00'
      editor:
      revisions:
        minItems: 1
      revisionsCount:
        description: The total number of revisions made for this edit.  Should be equal to revisions.length.
      annotations:
      annotationsCount:
        description: The total number of annotations associated with this edit.  Should be equal to annotations.length.
      # Admin Only:
      request:
        type: string
        description: The full text of the HTTP request that initiated this edit transaction.
        example: 'POST /bands HTTP/1.1\nContent-Length: 19\n\n{"name":"New Band"}'
      session:

  Editor:
    __gen__:
      namespace: edit-history
      methods:
        - GET
        - DELETE
      tokens:
        tag: Edit History
        collectionSummary: editors
        collectionDescription: editors.  An editor is an anonymous or registered Band Map editor who has performed one or more edits on the Band Map info.  {{explainReadOnlyRecords}}
    description: An anonymous or registered Band Map editor who has performed one or more edits on the Band Map info.
    properties:
      id:
      link:
      name:
        type: string
        description:  The name of this editor.  This will be the username for registered editors, or the ip address for anonymous editors.
        example: bandmapuser
      edits:
        minItems: 1
      editsCount:
        description: The total number of edits made by this editor.  Should be equal to edits.length.
      revisions:
      revisionsCount:
        description: The total number of revisions made by this editor.  Should be equal to revisions.length.
      annotations:
      annotationsCount:
        description: The total number of annotations made by this editor.  Should be equal to annotations.length.
      #Admin Only:
      user:
      ipAddress:
        type: string
        description: The IP address this editor most edited from.  IPv6 addresses are represented according to RFC 5952 (https://tools.ietf.org/html/rfc5952#section-4).
        example: 2001:abcd::666:ef
      userAgent:
        type: string
        description: The 'User-Agent' HTTP header sent with the last edit made by this user.
        example: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:54.0) Gecko/20100101 Firefox/54.0
      sessions:
      sessionsCount:
        description: The total number of sessions logged by this editor.  Should be equal to sessions.length.

  Revision:
    __gen__:
      namespace: edit-history
      methods:
        - GET
        - DELETE
      tokens:
        tag: Edit History
        collectionSummary: revisions
        collectionDescription: revisions.  A revision is a single discrete fact addition or modification to the Band Map database, including a reference to the database cell involved and the edit it was a part of, and the cell contents before and after the revision
    description: A record of a single discrete fact addition or modification to the Band Map database, including a reference to the database cell involved and the edit it was a part of, and the cell contents before and after the revision.
    properties:
      id:
      link:
      edit:
      editor:
      type:
        type: string
        description: The type of database transaction this revision involved.
        enum:
          - insert
          - update
          - delete
        example: insert
      oldFact:
        type: string
        description: The previous fact recorded before this revision.  Only present for updates and deletes.
        example: Ben Ireland is a guitarist in Love Battery.
      newFact:
        type: string
        description: The new fact recorded after this revision.  Only present for inserts and updates.
        example: Ben Ireland is a drummer in Love Battery.
      annotations:
      annotationsCount:
        description: The total number of annotations associated with this revision.  Should be equal to annotations.length.
      # Admin Only:
      table:
        type: string
        description: The database table affected by this revision.
        example: band_person_roles
      column:
        type: string
        description: The database table column affected by this revision.
        example: role_id
      row:
        type: string
        description: The database table row affected by this revision.  In case of tables with composite id columns, the row ids are comma-delimited.
        example: '123,456'
      oldValue:
        type: string
        description: The previous value of the cell affected by this revision.  Only present for updates and deletes.
        example: '2'
      newValue:
        type: string
        description: The new value of the cell affected by this revision.  Only present for inserts and updates.
        example: '3'

  Annotation:
    __gen__:
      namespace: edit-history
      tokens:
        tag: Edit History
        collectionDescription: annotations.  An annotation is an additional comment, usually an info source citation, associated with one discrete revision to the Band Map info
    description: An additional comment, usually an info source citation, associated with one discrete revision to the Band Map info.  POSTed annotations require a revision to be tied to.  Only the "description" field of an annotation is mutable after an initial POST.
    required:
      - revision
    properties:
      id:
      link:
      edit:
        __gen__:
          methods:
            - GET
            - POST
            - PUT
      editor:
        __gen__:
          methods:
            - GET
            - POST
            - PUT
      fact:
        __gen__:
          methods:
            - GET
        type: string
        description: The fact this is an annotation for.  A convenience field so that you don't have to look up the fact through the revision.
        example: Ben Ireland is a drummer in Love Battery.
      revision:
        __gen__:
          methods:
            - GET
            - POST
            - PUT
      infoSource:
        __gen__:
          methods:
            - GET
            - POST
            - PUT
        description: The source for this annotation, if it is a fact citation.
      url:
        __gen__:
          methods:
            - GET
            - POST
            - PUT
        type: string
        description: An absolute URL linking to the source or citation for this annotation.  This is usually more specific (a specific page or API request) than the related info source URL.
        example: https://www.bandnewswebsite.com/posts/123
      fullRequest:
        __gen__:
          methods:
            - GET
            - POST
            - PUT
        type: string
        description: A copy of the full text of the HTTP request made for citing this annotation.  This is mostly for use by curator bots for when info retrieval required a POST or some kind of more complicated lookup, and it provides for recording the whole HTTP request text needed to verify the annotation.  This should hopefully be unnecessary for human user-supplied annotations.
        example: 'POST /lookup HTTP/1.1\nHost: www.bandnewswebsite.com\nContent-Length: 24\n\n{"bandName":"Some Band"}'
      datetime:
        __gen__:
          methods:
            - GET
            - POST
            - PUT
        type: string
        format: dateTime
        description: The date and time this annotation was made.  {{explainDateTimeFormat}}
        example: '1980-04-20T06:09:00-08:00'
      description:
        type: string
        description: A free-form citation or additional info related to the associated fact/revision.
        minLength: 1
        example: 'Lastname, Firstname. "Article About The Band".  Band News Website.  Published: 1980-04-20T06:09:00-08:00.  Blog Post: https://www.bandnewswebsite.com/posts/123.  Accessed: 1980-04-20T06:09:30-08:00.  Clip: "...this new guitarist Guitarist Name joined The Band today..."'

  InfoSource:
    __gen__:
      namespace: edit-history
      tokens:
        tag: Edit History
        singular: info source
        collectionDescription: info sources, usually websites, for information about bands, people, or anything else found on Band Map
    description: A source, usually a website, for information about bands, people, or anything else found on Band Map.
    properties:
      id:
      link:
      url:
        __gen__:
          isId: true
        type: string
        description: The URL of this info source.
        minLength: 1
        example: https://www.socialmediawebsite.com/bands/band-name
      description:
        type: string
        description: A description of this info source.  {{onlyPresent}}
        example: Band Name on Social Media Website
      parent:
        __gen__:
          fieldType: sub_tlo
          topLevelObject: InfoSource
        description: The parent or containing source for this info source, if one exists.  For example, the Songkick website is the parent of Songkick band and event pages.
      children:
        __gen__:
          fieldType: subcollection
          topLevelObject: InfoSource
        description: An array of the child or contained sources for this info source, if any exist.  For example, Songkick band and event pages are children of the Songkick website.
        items:
          description: A child info source for this info source.
          properties:
            id:
            link:
            url:
              __gen__:
                isId: true
              type: string
              description: The URL of this info source.
              minLength: 1
              example: https://www.socialmediawebsite.com/bands/band-name
      childrenCount:
        description: The total number of child info sources for this info source.  Should be equal to children.length.
      tags:
        __gen__:
          fieldType: subcollection
          topLevelObject: InfoSourceTag
        type: array
        description: An array containing the tags associated with this info source.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          type: string
          minLength: 1
          description: 'A tag describing a category or attribute of this info source.  {{explainTags}}'
          example: wikipedia-band-page
      tagsCount:
        description: The total number of tags for this info source.  Should be equal to tags.length.


  # A WebLink is actually an alias of an InfoSource as far as the database/
  # data model works, but our swagger config generator tools can't handle that
  # so we'll redefine it here at the risk of code duplication to try not to
  # complicate matters with the doc generation.
  WebLink:
    type: object
    description: A web link related to this band.
    properties:
      url:
        type: string
        description: The URL of this band web link.
        example: https://www.socialmediawebsite.com/bands/band-name
      description:
        type: string
        description: A description of this web link.  {{onlyPresent}}
        example: Band Name on Social Media Website

  # Tag objects are a slightly special and simplified case
  # of normal top level collection objects.
  InfoSourceTag:
    __gen__:
      namespace: edit-history
      methods:
        - GET
        - POST
        - DELETE
      tokens:
        tag: Edit History
        singular: info source tag
        collectionSummary: info source tags
        collectionDescription: info source tags describing categories or attributes of info sources
        postDescription: A new {{singular}} to create.  {{explainTags}}
        post201Response: The specified info source tag or info source tags were added successfully.  The newly added info source tag or info source tags are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
        post201ResponseArray: An array containing the newly added {{plural}} in canonical form.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
        collectionDeleteDescription: 'An array of tags to delete.  Use either this request body or the provided query args to select which tags you want to delete.  WARNING: A DELETE call to this URI with no particular tags specified will cause ALL tags to be deleted and the ENTIRE collection to be cleared.'
        collectionDeleteArrayDescription: 'An array of tags to delete.  Use either this request body or the provided query args to select which tags you want to delete.  WARNING: A DELETE call to this URI with no particular tags specified will cause ALL tags to be deleted and the ENTIRE collection to be cleared.'
        collectionDeleteArrayItemsDescription: A tag to delete.
        itemPathDescription: Get the specified {{singular}}.
        itemPath200ResponseDescription: The tag, in canonical form.
        paramDescriptionOneId: The target info source tag.
        paramDescriptionTwoIds: The target info source tag.
        withWarnings: ''
    type: string
    minLength: 1
    description: 'A tag describing a category or attribute of an info source.  {{explainTags}}'
    example: wikipedia-band-page

  User:
    __gen__:
      tokens:
        tag: Admin
        collectionSummary: registered Band Map users
        collectionDescription: registered Band Map users
    description: A registered Band Map user.  Users do not have to register to browse or edit Band Map info, but if they do they can track their personal editing histories and get credit for their contributions.  Administrators have to register for extra privileges and access.
    required:
      - username
      - appRole
      - identityType
    properties:
      id:
      link:
      username:
        __gen__:
          isId: true
        type: string
        description: The username of this Band Map user.  Edits and session logs will appear under this name, rather than the associated person name (if one exists).
        minLength: 1
        maxLength: 255
        example: bandmapuser
      appRole:
        type: string
        description: The role of this user in the Band Map app.  Roles are tied to permissions and access control.
        enum:
          - user
          - bot
          - admin
        example: user
      identityType:
        type: string
        description: The website or method that this user is identified and authenticated with.  'bandmap' identified users use Band Map's own stored email and password hash to authenticate, rather than a third party's API like Google or Facebook.
        enum:
          - bandmap
        example: bandmap
      email:
        type: string
        description: This user's email address.
        minLength: 1
        example: bandmapuser@bandmap.com
      password:
        __gen__:
          methods:
            - POST
            - PATCH
            - PUT
        type: string
        description: The user's new hashed and salted password key.
        minLength: 8
      retypedPassword:
        __gen__:
          methods:
            - POST
            - PATCH
            - PUT
        type: string
        description: A confirmation field to double-check the user's new hashed and salted password key.
        minLength: 8
      oldPassword:
        __gen__:
          methods:
            - PATCH
            - PUT
        type: string
        description: A confirmation field to double-check the user's old hashed and salted password key for PATCHing password changes (with security precautions like the 'password' field).
        minLength: 8
      isVerified:
        __gen__:
          methods:
            - GET
        type: boolean
        description: True if this user has confirmed their email address and logged in successfully once with their password.
        example: true
      person:
        description: The person record associated with this user, if such an association exists.  Users might want to be associated with their person record for example if a band member of a band in Band Map also uses the Band Map app.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this person.
            minimum: 0
            example: 123
          link:
            type: string
            description: The stable, absolute URL linking to this person.
            example: https://www.seattlebandmap.com/api/people/123
          name:
            type: string
            description: The name of this person.
            minLength: 1
            maxLength: 255
            example: Person Name
      edits:
        __gen__:
          methods:
            - GET
        description: '{{anArrayOf}} the most recent 10000 edits to Band Map info made by this user.'
        items:
          description: An edit made by this user.
          properties:
            id:
            link:
      editsCount:
        __gen__:
          methods:
            - GET
        description: The number of edits returned for this user.  Should be equal to edits.length.
      revisions:
        __gen__:
          methods:
            - GET
        description: '{{anArrayOf}} the most recent 10000 discrete revisions (single facts) to Band Map info made by this user.'
        items:
          description: A revision made by this user.
          properties:
            id:
            link:
      revisionsCount:
        __gen__:
          methods:
            - GET
        description: The number of revisions returned for this user.  Should be equal to revisions.length.
      annotations:
        __gen__:
          methods:
            - GET
        description: '{{anArrayOf}} the most recent 10000 annotations to Band Map facts made by this user.'
        items:
          description: An annotation to a Band Map fact made by this user.
          properties:
            id:
            link:
      annotationsCount:
        __gen__:
          methods:
            - GET
        description: The number of annotations returned for this user.  Should be equal to annotations.length.
      sessions:
        __gen__:
          methods:
            - GET
        description: '{{anArrayOf}} the most recent 10000 sessions logged on the Band Map website by this user.'
        items:
          description: A session logged on the Band Map website by this user.
          properties:
            id:
            link:
      sessionsCount:
        description: The number of sessions returned for this user.  Should be equal to sessions.length.
      isDeleted:
        __gen__:
          methods:
            - GET
        type: boolean
        description: True if this user has deleted their registration, but we need to keep the user record so session and edit relations are still coherent.  This field appears for admin requests only.
        example: true

  Session:
    __gen__:
      methods:
        - GET
        - DELETE
      tokens:
        tag: Admin
        collectionDescription: Band Map website sessions
    description: A user session on the Band Map website.
    properties:
      id:
      link:
      username:
        type: string
        description:  The editor name or username logged for this session.  This will be the username for registered users, or the ip address for anonymous users.
        example: bandmapuser
      start:
          type: string
          format: dateTime
          description: The date and time this session began.  {{explainDateTimeFormat}}
          example: '1980-04-20T06:09:00-08:00'
      end:
          type: string
          format: dateTime
          description: The date and time this session ended.  {{explainDateTimeFormat}}
          example: '1980-04-20T09:06:00-08:00'
      edits:
        description: '{{anArrayContainingThe}} edits made during this session.'
        items:
          description: An edit made during this session.
      editsCount:
        description: The number of edits made during this session.  Should be equal to edits.length.
      revisions:
        description: '{{anArrayContainingThe}} revisions made during this session.'
        items:
          description: A revision made during this session.
      revisionsCount:
        description: The number of revisions made during this session.  Should be equal to revisions.length.
      annotations:
        description: '{{anArrayContainingThe}} annotations made during this session.'
        items:
          description: An annotation made during this session.
      annotationsCount:
        description: The number of annotations made during this session.  Should be equal to annotations.length.
      # Admin Only:
      user:
      ipAddress:
        type: string
        description: The IP address logged for this session.  IPv6 addresses are represented according to RFC 5952 (https://tools.ietf.org/html/rfc5952#section-4).
        example: 2001:abcd::666:ef
      userAgent:
        type: string
        description: The 'User-Agent' HTTP header sent with the last request made during this session.
        example: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:54.0) Gecko/20100101 Firefox/54.0
      cookie:
        type: string
        description: The full text of the most recent 'Cookie' or 'Set-Cookie' header received or sent for this session (whichever is most recent), if one exists.
        example: 'Cookie: name=value; token=other-stuff; whatever=stuff'

params:
  connectionParam:
    name: connection
    in: path
    type: string
    description: 'A specification of the target connection.  In the URL, a connection can be specified in either of two ways: canonical id (like "123-456"), or name id (like "band a-band b").  The ordering of bands in either way does not matter (that is, "band a-band b" will address the same connection as "band b-band a").  If you are specifying bands by name, preserve any spaces between words in the name in the URL - they will be processed normally.'
    required: true

  stateParam:
    name: state
    in: path
    type: string
    description: The ID or name of the target state/province/prefecture (state names are typically abbreviated, like "WA" for "Washington").  If you are specifying by name, preserve any spaces between words in the name in the URL - they will be processed normally.
    required: true

  userParam:
    name: user
    in: path
    type: string
    description: The ID or username of the target user.
    required: true

Collection:
  description: The collection of {{collectionDescription}}.
  properties:
    link:
      description: A stable, absolute URL linking to this {{plural}} collection or collection segment.
      example: '{{url}}?limit=100&offset=200'
    offset:
      type: integer
      description: The offset from the first {{singular}} in the collection that is being returned in the {{plural}} array.
      default: 0
      example: 200
    limit:
      type: integer
      description: The maximum number of {{plural}} that will be returned at once.
      default: 10000
      example: 100
    total:
      type: integer
      description: The total number of {{plural}} in this collection, or if a 'filter' argument was given, the total number of {{plural}} after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
      example: 1000
    collectionItems:
      type: array
      items:
        $ref: "#/definitions/{{codeSingular}}"
    collectionItemsCount:
      type: integer
      description: The number of {{plural}} actually returned in the {{plural}} array.
      example: 100
    first:
      type: string
      description: A stable, absolute URL linking to the first segment in this collection for the given limit.
      example: '{{url}}?limit=100'
    prev:
      type: string
      description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
      example: '{{url}}?limit=100&offset=100'
    next:
      type: string
      description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
      example: '{{url}}?limit=100&offset=300'
    last:
      type: string
      description: A stable, absolute URL linking to the last segment in this collection for the given limit.
      example: '{{url}}?limit=100&offset=900'

CollectionPath:
  get:
    tags:
    summary: '{{collectionPathSummary}}'
    description: '{{collectionPathDescription}}'
    security: []
    parameters:
      - $ref: "#/parameters/limitParam"
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/sortParam"
      - $ref: "#/parameters/filterParam"
      - $ref: "#/parameters/fieldsParam"
      - $ref: "#/parameters/noFieldsParam"
    responses:
      200:
        description: The collection of {{collectionDescription}}.
        schema:
          $ref: "#/definitions/{{codePlural}}"
      default:
        description: Error object in case an unexpected error occurs.
        schema:
          $ref: "#/definitions/Errors"
  post:
    tags:
    summary: Submit a new {{singular}} or {{plural}}.
    description: Submit a new {{singular}} or {{plural}} to the {{plural}} collection.  {{capPlural}} must be submitted in an array, even if there is only one.
    parameters:
      - name: '{{camelCasePlural}}'
        in: body
        description: An array containing one or more {{plural}} to add to the {{plural}} collection.
        required: true
        schema:
          type: array
          description: An array containing one or more {{plural}} to add to the {{plural}} collection.
          minItems: 1
          items:
            $ref: '#/definitions/{{codeSingular}}Post'
      - $ref: "#/parameters/limitParam"
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/sortParam"
      - $ref: "#/parameters/filterParam"
      - $ref: "#/parameters/fieldsParam"
      - $ref: "#/parameters/noFieldsParam"
    responses:
      201:
        description: '{{post201Response}}'
        schema:
          type: array
          description: '{{post201ResponseArray}}'
          minItems: 1
          items:
            $ref: '#/definitions/{{codeSingular}}'
      default:
        description: Error object in case an unexpected error occurs.
        schema:
          $ref: "#/definitions/Errors"
  patch:
    tags:
    summary: '{{collectionPathSummaryPatch}}'
    description: '{{collectionPathDescriptionPatch}}'
    parameters:
      - name: '{{camelCasePlural}}Patch'
        in: body
        description: '{{collectionPathArrayDescriptionPatch}}'
        required: true
        schema:
          type: array
          description: '{{collectionPathArrayDescriptionPatch}}'
          minItems: 1
          items:
            $ref: '#/definitions/{{codeSingular}}Patch'
      - $ref: "#/parameters/limitParam"
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/sortParam"
      - $ref: "#/parameters/filterParam"
      - $ref: "#/parameters/fieldsParam"
      - $ref: "#/parameters/noFieldsParam"
    responses:
      200:
        description: 'The specified {{singular}} or {{plural}} were modified successfully.  The modified {{singular}} or {{plural}} are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only modifications occurred - no new {{plural}} were created.'
        schema:
          type: array
          description: 'Array containing the {{singular}} or {{plural}} that were modified successfully, including their assigned {{primaryIdField}} and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.'
          minItems: 1
          items:
            $ref: '#/definitions/{{codeSingular}}'
      201:
        description: 'The specified {{singular}} or {{plural}} were modified and/or created successfully.  The modified/created {{singular}} or {{plural}} are returned in the response body array with their assigned {{primaryIdField}} and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the {{plural}} were new additions to the collection, not just modifications of existing {{plural}}.'
        schema:
          type: array
          description: 'An array containing the {{singular}} or {{plural}} that were created or modified successfully, including their assigned {{primaryIdField}} and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.'
          minItems: 1
          items:
            $ref: '#/definitions/{{codeSingular}}'
      default:
        description: Error object in case an unexpected error occurs.
        schema:
          $ref: "#/definitions/Errors"
  put:
    tags:
    summary: '{{collectionPathSummaryPut}}'
    description: '{{collectionPathDescriptionPut}}'
    parameters:
      - name: '{{camelCasePlural}}Put'
        in: body
        description: '{{collectionPathArrayDescriptionPut}}'
        required: true
        schema:
          type: array
          description: '{{collectionPathArrayDescriptionPut}}'
          minItems: 1
          items:
            $ref: '#/definitions/{{codeSingular}}Put'
      - $ref: "#/parameters/limitParam"
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/sortParam"
      - $ref: "#/parameters/filterParam"
      - $ref: "#/parameters/fieldsParam"
      - $ref: "#/parameters/noFieldsParam"
    responses:
      200:
        description: 'The specified {{singular}} or {{plural}} were replaced successfully.  The replaced {{singular}} or {{plural}} are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only replacements occurred - no new {{plural}} were created.'
        schema:
          type: array
          description: 'An array containing the {{singular}} or {{plural}} that were replaced successfully, including their assigned {{primaryIdField}} and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.'
          minItems: 1
          items:
            $ref: '#/definitions/{{codeSingular}}'
      201:
        description: 'The specified {{singular}} or {{plural}} were replaced and/or created successfully.  The replaced/created {{singular}} or {{plural}} are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the {{plural}} were new additions to the collection, not just replacements of existing {{plural}}.'
        schema:
          type: array
          description: 'An array containing the {{singular}} or {{plural}} that were replaced and/or created successfully, including their assigned {{primaryIdField}} and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.'
          minItems: 1
          items:
            $ref: '#/definitions/{{codeSingular}}'
      default:
        description: Error object in case an unexpected error occurs.
        schema:
          $ref: "#/definitions/Errors"
  delete:
    tags:
    summary: Delete the specified {{singular}} or {{plural}}.
    description: Delete the specified {{singular}} or {{plural}}.
    parameters:
      - name: '{{camelCasePlural}}Delete'
        in: body
        description: '{{collectionDeleteDescription}}'
        schema:
          type: array
          description: '{{collectionDeleteArrayDescription}}'
          minItems: 0
          items:
            type: string
            description: '{{collectionDeleteArrayItemsDescription}}'
      - $ref: "#/parameters/targetsParam"
      - $ref: "#/parameters/filterInputParam"
    responses:
      204:
        description: The specified {{plural}} were deleted successfully.
      default:
        description: Error object in case an unexpected error occurs.
        schema:
          $ref: "#/definitions/Errors"

SubCollectionPath:
  get:
    tags:
    summary: Get the collection of {{collectionContents}}.
    description: Get the collection of {{collectionContents}}.
    security: []
    parameters:
      - $ref: "#/parameters/limitParam"
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/sortParam"
      - $ref: "#/parameters/filterParam"
      - $ref: "#/parameters/fieldsParam"
      - $ref: "#/parameters/noFieldsParam"
    responses:
      200:
        description: The collection of {{collectionContents}}.
        schema:
          $ref: "#/definitions/{{codePlural}}"
      default:
        description: Error object in case an unexpected error occurs.
        schema:
          $ref: "#/definitions/Errors"
  post:
    tags:
    summary: Submit a new set of {{collectionContents}}.
    description: Submit a new set of {{collectionContents}}.  {{capPlural}} must be submitted in an array, even if there is only one.
    parameters:
      - name: '{{camelCasePlural}}'
        in: body
        description: An array containing one or more new or existing {{plural}} to add to the {{plural}} collection.
        required: true
        schema:
          type: array
          description: An array containing one or more new or existing {{plural}} to add to the {{plural}} collection.
          minItems: 1
          items:
            $ref: '#/definitions/{{codeSingular}}Post'
      - $ref: "#/parameters/limitParam"
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/sortParam"
      - $ref: "#/parameters/filterParam"
      - $ref: "#/parameters/fieldsParam"
      - $ref: "#/parameters/noFieldsParam"
    responses:
      200:
        description: The specified {{singular}} or {{plural}} were added to this {{parentSingular}} successfully.  The newly added {{singular}} or {{plural}} are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only additions to the {{parentSingular}} occurred - no new {{plural}} were created.
        schema:
          type: array
          description: An array containing the newly added {{singular}} or {{plural}} including their assigned {{primaryIdField}} and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
          minItems: 1
          items:
            $ref: '#/definitions/{{codeSingular}}'
      201:
        description: The specified {{singular}} or {{plural}} were created and/or added to this {{parentSingular}} successfully.  The newly added {{singular}} or {{plural}} are returned in the response body array with their assigned {{primaryIdField}} and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the {{plural}} were newly created, not just modifications of or references to existing {{plural}}.'
        schema:
          type: array
          description: An array containing the newly added {{singular}} or {{plural}} including their assigned {{primaryIdField}} and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
          minItems: 1
          items:
            $ref: '#/definitions/{{codeSingular}}'
      default:
        description: Error object in case an unexpected error occurs.
        schema:
          $ref: "#/definitions/Errors"
  patch:
    tags:
    summary: Modify or add the specified {{collectionContents}}.
    description: Modify or add the specified {{collectionContents}}.  Specify the {{singular}} or {{plural}} to be modified/added using {{singular}} {{idFields}}.  The query args for this operation apply only to the returned array confirming your changes.
    parameters:
      - name: '{{camelCasePlural}}Patch'
        in: body
        description: 'An array containing one or more partial {{singular}} objects specified by {{idFields}} along with the fields you want to modify and their new values.  If you specify any {{plural}} that do not exist already, they will be created.  If you specify any {{plural}} that are not associated with this {{parentSingular}} already, they will be added.  If you are modifying one of the sub-arrays within a {{singular}}, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.'
        required: true
        schema:
          type: array
          description: 'An array containing one or more partial {{singular}} objects specified by {{idFields}} along with the fields you want to modify and their new values.  If you specify any {{plural}} that do not exist already, they will be created.  If you specify any {{plural}} that are not associated with this {{parentSingular}} already, they will be added.  If you are modifying one of the sub-arrays within a {{singular}}, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.'
          items:
            $ref: '#/definitions/{{codeSingular}}Patch'
      - $ref: "#/parameters/limitParam"
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/sortParam"
      - $ref: "#/parameters/filterParam"
      - $ref: "#/parameters/fieldsParam"
      - $ref: "#/parameters/noFieldsParam"
    responses:
      200:
        description: 'The specified {{singular}} or {{plural}} were modified and/or added successfully.  The modified/added {{singular}} or {{plural}} are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only modifications or additions to the {{parentSingular}} occurred - no new {{plural}} were created.'
        schema:
          type: array
          description: 'Array containing the {{singular}} or {{plural}} that were modified successfully, including their assigned {{primaryIdField}} and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.'
          minItems: 1
          items:
            $ref: '#/definitions/{{codeSingular}}'
      201:
        description: 'The specified {{singular}} or {{plural}} were modified/created and/or added to the {{parentSingular}} successfully.  The modified/created/added {{singular}} or {{plural}} are returned in the response body array with their assigned {{primaryIdField}} and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the {{plural}} were newly created, not just modifications of or references to existing {{plural}}.'
        schema:
          type: array
          description: 'An array containing the {{singular}} or {{plural}} that were modified/created and added to the {{parentSingular}} successfully, including their assigned {{primaryIdField}} and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.'
          minItems: 1
          items:
            $ref: '#/definitions/{{codeSingular}}'
      default:
        description: Error object in case an unexpected error occurs.
        schema:
          $ref: "#/definitions/Errors"
  put:
    tags:
    summary: Replace/create the specified {{collectionContents}}.  Add them to this subcollection in the {{parentSingular}} if they were not already here.
    description: Replace/create the specified {{collectionContents}}.  Specify {{plural}} to be replaced by {{idFields}}.  Add them to this subcollection in the {{parentSingular}} if they were not already here.  The query args for this operation apply only to the returned array confirming your changes.
    parameters:
      - name: '{{camelCasePlural}}Put'
        in: body
        description: An array containing one or more {{plural}} specified by {{idFields}}.  If you specify a {{singular}} that exists already, the {{singular}} will be replaced.  If you specify a {{singular}} that does not exist, the {{singular}} will be created.  Either way, if the {{singular}} is not associated with this {{parentSingular}} already (in this collection), the {{singular}} will be added.
        required: true
        schema:
          type: array
          description: An array containing one or more {{plural}} specified by {{idFields}}.  If you specify a {{singular}} that exists already, the {{singular}} will be replaced.  If you specify a {{singular}} that does not exist, the {{singular}} will be created.  Either way, if the {{singular}} is not associated with this {{parentSingular}} already (in this collection), the {{singular}} will be added.
          minItems: 1
          items:
            $ref: '#/definitions/{{codeSingular}}Put'
      - $ref: "#/parameters/limitParam"
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/sortParam"
      - $ref: "#/parameters/filterParam"
      - $ref: "#/parameters/fieldsParam"
      - $ref: "#/parameters/noFieldsParam"
    responses:
      200:
        description: The specified {{singular}} or {{plural}} were replaced.  They were added to this {{parentSingular}} if they were not already associated.  The replaced {{singular}} or {{plural}} are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that all of the returned {{plural}} are replacements - not brand new {{plural}}.
        schema:
          type: array
          description: An array containing the {{singular}} or {{plural}} that were replaced successfully.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
          minItems: 1
          items:
            $ref: '#/definitions/{{codeSingular}}'
      201:
        description: The specified {{singular}} or {{plural}} were replaced and/or created successfully.  They were added to this {{parentSingular}} if they were not already associated.  The replaced/created {{singular}} or {{plural}} are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the {{plural}} are brand new and did not replace any existing {{plural}}.
        schema:
          type: array
          description: An array containing the {{singular}} or {{plural}} that were replaced or created successfully, including their assigned {{primaryIdField}} and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
          minItems: 1
          items:
            $ref: '#/definitions/{{codeSingular}}'
      default:
        description: Error object in case an unexpected error occurs.
        schema:
          $ref: "#/definitions/Errors"
  delete:
    tags:
    summary: Remove the specified {{collectionContents}}.
    description: Remove the specified {{collectionContents}}.
    parameters:
      - name: '{{camelCasePlural}}Delete'
        in: body
        description: 'An array of {{idFields}} values representing one or more {{plural}} to remove from this {{parentSingular}}.  Use either this request body or the provided query args to select which {{plural}} you want to remove.  A remove call to this URI with no particular {{plural}} specified will cause ALL {{plural}} to be removed from the {{parentSingular}}.'
        schema:
          type: array
          description: 'An array of {{idFields}} values representing one or more {{plural}} to remove from this {{parentSingular}}.  Use either this request body or the provided query args to select which {{plural}} you want to remove.  A remove call to this URI with no particular {{plural}} specified will cause ALL {{plural}} to be removed from the {{parentSingular}}.'
          minItems: 0
          items:
            type: string
            description: The {{idFields}} of a {{singular}} to remove from the {{parentSingular}}.
      - $ref: "#/parameters/targetsParam"
      - $ref: "#/parameters/filterInputParam"
    responses:
      204:
        description: The specified {{plural}} were removed from the {{parentSingular}} successfully.
      default:
        description: Error object in case an unexpected error occurs.
        schema:
          $ref: "#/definitions/Errors"

ItemPath:
  get:
    tags:
    summary: '{{itemPathSummary}}'
    description: '{{itemPathDescription}}'
    security: []
    parameters:
      - $ref: "#/parameters/fieldsParam"
      - $ref: "#/parameters/noFieldsParam"
    responses:
      200:
        description: '{{itemPath200ResponseDescription}}'
        schema:
          $ref: "#/definitions/{{codeSingular}}{{withWarnings}}"
      default:
        description: Error object in case an unexpected error occurs.
        schema:
          $ref: "#/definitions/Errors"
  patch:
    tags:
    summary: Modify the specified {{singular}}.
    description: Modify the specified {{singular}}.
    parameters:
      - name: '{{camelCaseSingular}}Patch'
        in: body
        description: '{{itemPathDescriptionPatch}}'
        required: true
        schema:
          $ref: '#/definitions/{{codeSingular}}PatchOne'
      - $ref: "#/parameters/fieldsParam"
      - $ref: "#/parameters/noFieldsParam"
    responses:
      200:
        description: The specified {{singular}} was modified successfully.  The {{singular}} is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
        schema:
          $ref: "#/definitions/{{codeSingular}}"
      default:
        description: Error object in case an unexpected error occurs.
        schema:
          $ref: "#/definitions/Errors"
  put:
    tags:
    summary: Replace the specified {{singular}}.
    description: Replace the specified {{singular}}.
    parameters:
      - name: '{{camelCaseSingular}}Put'
        in: body
        description: A new {{singular}} to replace the specified {{singular}}.
        required: true
        schema:
          $ref: '#/definitions/{{codeSingular}}PutOne'
      - $ref: "#/parameters/fieldsParam"
      - $ref: "#/parameters/noFieldsParam"
    responses:
      200:
        description: The specified {{singular}} was replaced successfully.  The new {{singular}} is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
        schema:
          $ref: "#/definitions/{{codeSingular}}"
      default:
        description: Error object in case an unexpected error occurs.
        schema:
          $ref: "#/definitions/Errors"
  delete:
      tags:
      summary: Delete the specified {{singular}}.
      description: Delete the specified {{singular}}.
      parameters:
      responses:
        204:
          description: The specified {{singular}} was deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: "#/definitions/Errors"

SubcollectionItemPath:
  delete:
      tags:
      summary: Remove the specified {{singular}} from this {{parentSingular}}.
      description: Delete the specified {{singular}} from this {{parentSingular}}.
      parameters:
      responses:
        204:
          description: The specified {{singular}} was removed from this {{parentSingular}} successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: "#/definitions/Errors"

Warnings:
  type: array
  description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
  items:
    $ref: "#/definitions/Warning"


Output:
  # Swagger (OpenAPI) Specification of the Band Map API

  swagger: '2.0'

  info:
    title: Band Map
    version: '1.0.0'
    description: Welcome to the Seattle Band Map API!  This is a [RESTful web interface](https://en.wikipedia.org/wiki/Representational_state_transfer) for accessing info about Seattle bands and how they are connected.

  host: localhost:3000
  basePath: /api

  schemes:
    - http
  produces:
    - application/json

  tags:
    - name: API Root
      description: General API info.
    - name: Bands
      description: Resources about bands.
    - name: People
      description: Resources about band members and related people.
    - name: Roles
      description: Resources about the roles people have in bands.
    - name: Connections
      description: Resources about connections between bands.
    - name: Locations
      description: Resources related to the geographic location of bands.
    - name: Edit History
      description: Resources for tracking edits users make to Band Map info.
    - name: Admin
      description: Resources related to Band Map site and app administration.

  # Here we apply the security flow called 'accessCode' globally to all the opeartions in the spec. 
  # This security scheme is defined below in the 'securityDefinitions' section.
  # Global security can be overriden an operation level as seen in the example below
  # security:
  #   - accessCode:
  #     - read
  #     - write

  paths:

    /:
      get:
        tags:
          - API Root
        summary: Get general API info and a listing of resources available at the API root.
        description: Get general API info and a listing of resources available at the API root.
        # Require no security schemes and override the globally defined security scheme.
        security: []
        parameters:
          - $ref: "#/parameters/sortParam"
          - $ref: "#/parameters/filterParam"
          - $ref: "#/parameters/fieldsParam"
          - $ref: "#/parameters/noFieldsParam"
        responses:
          200:
            description: Object containing API info and a listing of resources available at the API root.
            schema:
              $ref: "#/definitions/APIRootListing"
          default:
            description: Error object in case an unexpected error occurs.
            schema:
              $ref: "#/definitions/Errors"

    /bands:

    /connections:

    /people:

    /roles:

    /locations:

    /locations/cities:

    /locations/states:

    /locations/countries:

    /locations/regions:

    /edit-history:

    /edit-history/edits:

    /edit-history/editors:

    /edit-history/revisions:

    /edit-history/annotations:

    /edit-history/info-sources:

    /edit-history/info-source-tags:

    /users:

    /sessions:


  # Under securityDefinitions we declare which security schemes can be used.
  # These definitions can be applied using the 'security' key at the global
  # level or the operation level.
  # Note that for Access Code Flow, you must provide the Token URL.
  # securityDefinitions:
  #   accessCode:
  #     type: oauth2
  #     # This should be updated to the Token URL of your OAuth provider.
  #     tokenUrl: http://localhost:3000/oauth/token
  #     # This should be updated to the Authorization URL of your OAuth provider.
  #     authorizationUrl: http://localhost:3000/oauth/auth
  #     flow: accessCode
  #     scopes:
  #       write: allows modifying resources
  #       read: allows reading resources


  parameters:

    limitParam:
      name: limit
      in: query
      type: integer
      description: The maximum number of objects to return at once.
      minimum: 0
      maximum: 10000000

    offsetParam:
      name: offset
      in: query
      type: integer
      description: Used to begin retrieving results from the middle of a collection, a zero-based offset from the start of the collection.
      minimum: 0

    sortParam:
      name: sort
      in: query
      type: array
      collectionFormat: 'csv'
      description: "A comma-delimited list of fields to sort returned objects on, where the first specified field will be the primary sort, second field will be the secondary sort, and so on.  Use <field>:asc or <field>:desc to specify ascending or descending sorts, ascending is default."
      minItems: 0
      maxItems: 1000
      items:
        type: string

    filterParam:
      name: filter
      in: query
      type: string
      description: "A filter expression for filtering returned objects.  Works as described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering), and additionally allows a 'contains' or 'ct' operator for filtering on string field values."

    fieldsParam:
      name: fields
      in: query
      type: array
      collectionFormat: 'csv'
      description: A comma-delimited list of fields (attributes) of the objects or nested sub-objects returned at this resource.  Dot notation (like field.subfield) can be used to address nested sub-object fields.  Only the fields specified will be returned.
      minItems: 0
      maxItems: 1000
      items:
        type: string

    noFieldsParam:
      name: 'no-fields'
      in: query
      type: array
      collectionFormat: 'csv'
      description: A comma-delimited list of fields (attributes) of the objects or nested sub-objects returned at this resource.  Dot notation (like field.subfield) can be used to address nested sub-object fields.  The fields specified will not be returned.
      minItems: 0
      maxItems: 1000
      items:
        type: string

    prettyParam:
      name: pretty
      in: query
      type: boolean
      description: "If false, whitespace will not be included in JSON responses.  Default is true: JSON responses will be formatted with indentation and line breaks."
      default: true

    helpParam:
      name: help
      in: query
      allowEmptyValue: true
      type: boolean
      description: Instead of the normal output, retrieve a human-readable, HTML formatted description of the resource.
      default: true

    docParam:
      name: doc
      in: query
      allowEmptyValue: true
      type: boolean
      description: Instead of the normal output, retrieve a human-readable, HTML formatted description of the resource.
      default: true

    schemaParam:
      name: schema
      in: query
      allowEmptyValue: true
      type: boolean
      description: Instead of the normal output, retrieve a machine-readable [JSON schema](http://json-schema.org/) describing the resource.
      default: true

    annotationsParam:
      name: annotations
      in: query
      allowEmptyValue: true
      type: boolean
      description: Include any existing editor annotations on all returned objects and nested sub-objects (citations for facts or additional relevant info).
      default: true

    idsParam:
      name: ids
      in: query
      type: array
      collectionFormat: 'csv'
      description: A comma-delimited list of IDs specifying the targets in this collection to operate on.
      minItems: 0
      maxItems: 10000000
      items:
        type: string

    namesParam:
      name: names
      in: query
      type: array
      collectionFormat: 'csv'
      description: A comma-delimited list of names specifying the targets in this collection to operate on.
      minItems: 0
      maxItems: 10000000
      items:
        type: string

    targetsParam:
      name: targets
      in: query
      type: array
      collectionFormat: 'csv'
      description: A comma-delimited list of ids or names specifying the targets in this collection to operate on.
      minItems: 0
      maxItems: 10000000
      items:
        type: string

    filterInputParam:
      name: filter
      in: query
      type: string
      description: "A filter expression for filtering target objects.  Works as described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering), and additionally allows a 'contains' or 'ct' operator for filtering on string field values.  The objects in this collection targeted by the filter will be operated on."

    pathParams:

  definitions:

    APIRootListing:
      properties:
        version:
          type: string
          description: "API version served from this root (example: '1.0')."
        description:
          type: string
          description: API description.
        resources:
          description: Listing of available resources.
          properties:
            bands:
              description: Object containing info about the bands resource.
              properties:
                link:
                  type: string
                  description: Link to the bands resource.
                description:
                  type: string
                  description: Description of the bands resource.
            people:
              description: Object containing info about the people resource.
              properties:
                link:
                  type: string
                  description: Link to the people resource.
                description:
                  type: string
                  description: Description of the people resource.
            roles:
              description: Object containing info about the roles resource.
              properties:
                link:
                  type: string
                  description: Link to the roles resource.
                description:
                  type: string
                  description: Description of the roles resource.
            connections:
              description: Object containing info about the connections resource.
              properties:
                link:
                  type: string
                  description: Link to the roles resource.
                description:
                  type: string
                  description: Description of the roles resource.
            locations:
              description: Object containing info about the locations resources.
              properties:
                link:
                  type: string
                  description: Link to the locations resources listing.
                description:
                  type: string
                  description: Description of the locations resources listing.
            admin:
              description: Object containing info about the admin resources.
              properties:
                link:
                  type: string
                  description: Link to the admin resources listing.
                description:
                  type: string
                  description: Description of the admin resources listing.
    
    Bands:

    Connections:

    People:

    Roles:

    Cities:

    States:

    Countries:

    Regions:

    Edits:

    Editors:

    Revisions:

    Annotations:

    InfoSources:

    InfoSourceTags:

    Users:

    Sessions:

    ActiveDates:
      description: Active dates for this entry.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
      properties:
        from:
          type: string
          format: date
          description: 'The date this active date range started.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
          example: '1980-04-20'
        until:
          type: string
          format: date
          description: 'The date this active date range ended.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
          example: '2020-04-20'

    Warning:
      properties:
        warning:
          description: An object containing a warning or warnings about the request, usually about a query argument or part of the request body that was invalid and ignored, but not enough to refuse the request.
          properties:
            code:
              type: string
              description: A short warning code identifying this warning.
              enum:
                - invalid-arguments
                - incompatible-arguments
                - unrecognized-fields
                - duplicate-arguments
                - empty-objects-requested
              example: invalid-arguments
            message:
              type: string
              description: A more detailed message describing this warning.
              example: This argument or whatever wasn't quite right.

    Error:
      properties:
        error:
          description: An object containing details about an error.
          properties:
            code:
              type: string
              description: A short error code identifier string describing this error.
              enum:
                - not-found
                - invalid-sort
                - invalid-filter
                - nothing-requested
                - server-error
                - not-implemented-yet
                # Schema Validation:
                - schema-validation-failed
                - object-missing-required-property
                - enum-mismatch
                - maximum
                - maximum-exclusive
                - minimum
                - minimum-exclusive
                - multiple-of
                - pattern
                - required
                - invalid-type
                - array-length-long
                - array-length-short
                - array-unique
                - max-length
                - min-length
                - max-properties
                - min-properties
              example: server-error
            message:
              type: string
              description: A more detailed message describing this error.
              example: There was an error doing the thing.

    Errors:
      properties:
        errors:
          type: array
          description: An array containing one or more errors that occurred processing the request.
          items:
            $ref: "#/definitions/Error"
        warnings:
          type: array
          description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
          items:
            $ref: "#/definitions/Warning"
